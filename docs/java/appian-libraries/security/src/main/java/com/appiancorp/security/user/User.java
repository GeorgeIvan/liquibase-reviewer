package com.appiancorp.security.user;

import java.io.Serializable;

import javax.annotation.CheckReturnValue;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.appian.core.persist.Constants;
import com.appiancorp.type.refs.Ref;
import com.appiancorp.type.refs.UserRef;
import com.google.common.annotations.GwtCompatible;
import com.google.common.base.Function;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
/**
 * This class is sometimes used for persistence, and sometimes used for
 * marshalling to/from K. If used for persistence, there will be a Long id
 * used. If for k, only the username will be used.
 */
@Entity @Table(name="usr")
@GwtCompatible
public class User implements UserRef, Serializable {
  private static final long serialVersionUID = 1L;

  public static final String PROP_ID = "id";
  public static final String PROP_USERNAME = "username";
  public static final String PROP_RDBMS_ID = "rdbmsId";
  public static final String JOIN_COL_USR_ID = "usr_id";

  private Long id;
  private String username;
  private String scsKeySalt;
  private String hashedScsKey;
  private String personalizationUserUuid;

  public User() {}   // for JAXB and hibernate proxy
  public User(Long id) {
    this.id = id;
  }
  public User(String username) {
    this.id = null;
    this.username = username;
  }
  public User(Long id, String username) {
    this.id = id;
    this.username = username;
  }
  public User(UserRef userRef) {
    Object id = userRef.getId();
    setId(id);
    this.username = userRef.getUuid();
  }
  @Override
  public Ref<Object,String> build(Object id, String uuid) {
    User u = new User();
    u.username = uuid;
    u.setId(id);
    return u;
  }

  /**
   * This is only exposed for callers that don't want to force loading the
   * entire User object if they have a lazy-loaded reference.
   */
  @Column(name="id")
  @Id
  @GeneratedValue
  public Long getRdbmsId() {
    return id;
  }
  protected void setRdbmsId(Long id) {
    this.id = id;
  }

  @Override
  @Transient
  public Object getId() {
    if (id != null) {
      return id;
    }
    return username;
  }
  public void setId(Object id) {
    if (id != null && id instanceof Long) {
      this.id = (Long)id;
    }
    if (id != null && id instanceof String) {
      this.username = (String)id;
    }
  }

  @Column(name="username", length=Constants.COL_MAXLEN_INDEXABLE, nullable=false, unique=true)
  @CheckReturnValue
  public String getUsername() {
    return username;
  }
  public void setUsername(String username) {
    this.username = username;
  }

  /**
   * Returns the salt for this user's Secure Credentials Store key.
   */
  @Column(name = "scs_key_salt", length = Constants.COL_MAXLEN_INDEXABLE, nullable = true)
  public String getScsKeySalt() {
    return scsKeySalt;
  }

  public void setScsKeySalt(String scsKeySalt) {
    this.scsKeySalt = scsKeySalt;
  }

  @Column(name = "scs_key_h", length = Constants.COL_MAXLEN_MAX_NON_CLOB, nullable = true)
  public String getHashedScsKey() {
    return hashedScsKey;
  }

  public void setHashedScsKey(String hashedScsKey) {
    this.hashedScsKey = hashedScsKey;
  }

  @Column(name = "usr_uuid", updatable = false, length = Constants.COL_MAXLEN_UUID)
  public String getPersonalizationUserUuid() {
    return personalizationUserUuid;
  }

  public void setPersonalizationUserUuid(String personalizationUserUuid) {
    this.personalizationUserUuid = personalizationUserUuid;
  }

  /**
   * IX uses Usernames as UUIDs for Users
   * @return Username
   */
  @Override
  @Transient
  public String getUuid() {
    return username;
  }

 @Override
 public final int hashCode() {
   return Objects.hashCode(getId(), getUsername());
 }

 // Generated by Eclipse 3.7, marked "final" manually
 @Override
 public final boolean equals(Object obj) {
   if (!(obj instanceof User)) {
     return false;
   }
   User other = (User) obj;
   return this == obj || (Objects.equal(getId(), other.getId()) && Objects.equal(getUsername(), other.getUsername()));
 }

  @Override
  public String toString() {
    return MoreObjects.toStringHelper("User").add("id", id).add("un", username).toString();
  }

  public static final Function<UserRef,String> selectUsername = new Function<UserRef,String>() {
    @Override
    public String apply(UserRef input) {
      return input.getUuid();
    }
  };

  public static final Function<UserRef,Long> selectUserId = new Function<UserRef,Long>() {
    @Override
    public Long apply(UserRef input) {
      return new User(input).getRdbmsId();
    }
  };
}
